apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ template "nginx" . }}-postinstall"
  labels:
    heritage: {{.Release.Service | quote }}
    release: {{.Release.Name | quote }}
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    component: "{{.Release.Name}}-postinstall"
spec:
  completions: 1
  parallelism: 1
  template:
    metadata:
      name: {{.Release.Name}}-postinstall
      labels:
        heritage: {{.Release.Service | quote }}
        release: {{.Release.Name | quote }}
        chart: "{{.Chart.Name}}-{{.Chart.Version}}"
        component: "{{.Release.Name}}-postinstall"
    spec:
     restartPolicy: "Never"
     containers:
      - name: "{{ template "nginx" . }}-postinstall"
        image: google/cloud-sdk 
        command: 
          - "/bin/bash"
          - "-cx"
          - |
            
            #log in
            #gcloud auth activate-service-account zonar-jenkins@cnct-zonar-1316.iam.gserviceaccount.com --key-file=/etc/gke-secrets/cnct-zonar-a29cf3bde22f.json
            #gcloud config set project cnct-zonar-1316

            #create inital self signed certs so the nginx proxy will start
            /etc/init/setup-certs.sh
            
            SERVICE_NAME='{{template "nginx" . }}'
            
            #restart the nginx pods
            kubectl scale deployment/${SERVICE_NAME} --replicas=0; 
            kubectl scale deployment/${SERVICE_NAME} --replicas=1;
            
            #Wait for the nginx service to have a public IP
            NEW_EXTERNAL_IP=$({{.Values.command}})
            while [ -z $NEW_EXTERNAL_IP ]; do
                sleep 10
                NEW_EXTERNAL_IP=$({{.Values.command}})
            done
            
            #Register the public IP with DNS
            gcloud auth activate-service-account {{.Values.dns_gcloud_service_account}} --key-file={{.Values.dns_gcloud_service_account_key_file}}
            gcloud config set project {{.Values.dns_gcloud_project}}
            #gcloud auth activate-service-account zonar-jenkins@cnct-zonar-1316.iam.gserviceaccount.com --key-file=/etc/gke-secrets/cnct-zonar-a29cf3bde22f.json
            #gcloud config set project cnct-zonar-1316
            
            TYPE=A
            TTL=300
            ZONE={{ .Values.dns_zone }}
            NAME={{ .Values.Nginx.domain }}
            CURRENT_IP=`gcloud dns record-sets list -z ${ZONE} --name="${NAME}." | awk END'{ print $4 }'`
            
            gcloud dns record-sets transaction start --zone=${ZONE} --transaction-file=./transaction.yaml
            if [ -z "${CURRENT_IP}" ]; then
              echo "no dns record current set for ${NAME}"
            else
              gcloud dns record-sets transaction remove -z ${ZONE} --name ${NAME} --ttl ${TTL} --type ${TYPE} "${CURRENT_IP}"
            fi
            gcloud dns record-sets transaction add -z ${ZONE} --name ${NAME} --ttl ${TTL} --type ${TYPE} "${NEW_EXTERNAL_IP}"
            gcloud dns record-sets transaction execute --zone=${ZONE} --transaction-file=./transaction.yaml
            
            #regenerate the certs - TBD
            #CURRENT_IP=`gcloud dns record-sets list -z cnct-dot-io --name="jenkins-zonar.cnct.io." | awk END'{ print $4 }'`
            #while [ "$CURRENT_IP" != "$NEW_EXTERNAL_IP" ]; do
            #  sleep 10;
            #  CURRENT_IP=`gcloud dns record-sets list -z cnct-dot-io --name="jenkins-zonar.cnct.io." | awk END'{ print $4 }'`
            #done
            
            
            
        volumeMounts:
            -
              mountPath: /etc/gke-secrets
              name: secret-volume
              readOnly: true
            -
              mountPath: /etc/init
              name: init
              readOnly: false
     volumes: 
      - name: secret-volume
        secret: 
            secretName: cluster-secrets
      - 
        name: "init"
        configMap:
          name: {{ template "letsencrypt" . }}
          "defaultMode": 0775
